"use strict";(self.webpackChunkhalo_documentation=self.webpackChunkhalo_documentation||[]).push([[516],{11470:(e,n,t)=>{t.d(n,{A:()=>y});var i=t(96540),r=t(34164),a=t(23104),o=t(56347),s=t(205),c=t(57485),d=t(31682),l=t(70679);function u(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i}))}(t);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(r),(0,i.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=h(e),[o,c]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a})),[d,u]=m({queryString:t,groupId:r}),[x,w]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,l.Dv)(n);return[t,(0,i.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),j=(()=>{const e=d??x;return p({value:e,tabValues:a})?e:null})();(0,s.A)(()=>{j&&c(j)},[j]);return{selectedValue:o,selectValue:(0,i.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),w(e)},[u,w,a]),tabValues:a}}var w=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function f({className:e,block:n,selectedValue:t,selectValue:i,tabValues:o}){const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,r=s.indexOf(n),a=o[r].value;a!==t&&(c(n),i(a))},l=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:i})=>(0,b.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{s.push(e)},onKeyDown:l,onClick:d,...i,className:(0,r.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function g({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===t);return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(g,{...n,...e})]})}function y(e){const n=(0,w.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var i=t(34164);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function o({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(96540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},59101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"documentations/sdk/branding-guidelines/mastercard/android-sdk/steps-to-integrate/step-1-initialise","title":"Step 1: Initialise","description":"Mastercard Sonic Branding - Android SDK provides SonicController and SonicView as a public interface to the sdk.","source":"@site/docs/documentations/sdk/branding-guidelines/mastercard/android-sdk/steps-to-integrate/step-1-initialise.mdx","sourceDirName":"documentations/sdk/branding-guidelines/mastercard/android-sdk/steps-to-integrate","slug":"/documentations/sdk/branding-guidelines/mastercard/android-sdk/steps-to-integrate/step-1-initialise","permalink":"/docs/documentations/sdk/branding-guidelines/mastercard/android-sdk/steps-to-integrate/step-1-initialise","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Steps to Integrate","permalink":"/docs/category/steps-to-integrate"},"next":{"title":"Step 2: Prepare","permalink":"/docs/documentations/sdk/branding-guidelines/mastercard/android-sdk/steps-to-integrate/step-2-prepare"}}');var r=t(74848),a=t(28453),o=t(11470),s=t(19365);const c={},d="Step 1: Initialise",l={},u=[{value:"Sonic Controller <a></a>",id:"sonic-controller-",level:4},{value:"Sonic View <a></a>",id:"sonic-view-",level:4},{value:"Sonic Merchant <a></a>",id:"sonic-merchant-",level:4}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"step-1-initialise",children:"Step 1: Initialise"})}),"\n",(0,r.jsxs)(n.p,{children:["Mastercard Sonic Branding - Android SDK provides ",(0,r.jsx)(n.code,{children:"SonicController"})," and ",(0,r.jsx)(n.code,{children:"SonicView"})," as a public interface to the sdk."]}),"\n",(0,r.jsxs)(n.h4,{id:"sonic-controller-",children:["Sonic Controller ",(0,r.jsx)("a",{href:"#sonic-controller",id:"sonic-controller"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"SonicController"})," provides a set of APIs for playing sound, animation, and haptics feedback. Initialize ",(0,r.jsx)(n.code,{children:"SonicController"})," as follows:"]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"Kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"import androidx.fragment.app.Fragment\nimport com.mastercard.sonic.controller.SonicController\n\nclass SonicFragment : Fragment(R.layout.fragment_sonic) {\n\n    private val sonicController = SonicController()\n\n}\n\n"})})}),(0,r.jsx)(s.A,{value:"Java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import androidx.fragment.app.Fragment;\nimport com.mastercard.sonic.controller.SonicController;\n\npublic class SonicFragment extends Fragment {\n\n    private SonicController sonicController = new SonicController();\n\n    public SonicFragment(){\n\n    }\n}\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"SonicController"})," exposes the following methods:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsxs)("p",{children:["fun prepare(sonicType: SonicType = SonicType.SOUND_AND_ANIMATION,",(0,r.jsx)("br",{}),"sonicCue: String,",(0,r.jsx)("br",{}),"sonicEnvironment: SonicEnvironment,",(0,r.jsx)("br",{}),"merchant: SonicMerchant,",(0,r.jsx)("br",{}),"isHapticsEnabled: Bool = true,",(0,r.jsx)("br",{}),"context: Context,",(0,r.jsx)("br",{}),"onPrepareListener: OnPrepareListener)"]})}),(0,r.jsx)(n.td,{children:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"prepare()"})," method to prepare a set of resources with below parameters",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"sonicType"})," param for sonic type merchant app wants to prepare",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"sonicCue"})," param for the cue merchant app wants to prepare",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"sonicEnvironment"})," Environment for which sonic is getting prepared",(0,r.jsx)("br",{}),"production - for production environment",(0,r.jsx)("br",{}),"sandbox - for development and testing.",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"merchant"})," merchant information for that sonic is getting prepared",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"isHapticsEnabled"})," enabling/disabling haptics feedback, default value is true.",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"context"})," is current state of the application",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"OnPrepareListener.onPrepared"})," callback with status code as success, partial success, or failure."]})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"fun play(sonicView: SonicView? = null, onCompleteListener: OnCompleteListener)"}),(0,r.jsx)(n.td,{children:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"play()"})," should be call after successful ",(0,r.jsx)("code",{children:"prepare()"}),". This plays the sonic (sound and/or animation)",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"sonicView"})," the view in which animation will play",(0,r.jsx)("br",{}),(0,r.jsx)("code",{children:"completion"})," provides status in callback with status code success, partially success or fail."]})})]})]})]}),"\n",(0,r.jsxs)(n.h4,{id:"sonic-view-",children:["Sonic View ",(0,r.jsx)("a",{href:"#sonic-view",id:"sonic-view"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"SonicView"})," is a custom view that displays the Sonic Animation with a background. You can add ",(0,r.jsx)(n.code,{children:"SonicView"})," into the parent view with any width and height value. It is recommended to provide the following properties to ",(0,r.jsx)(n.code,{children:"SonicView"})," with a proper value."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default Value"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["android",":layout","_width"]}),(0,r.jsx)(n.td,{children:"Set the width"}),(0,r.jsx)(n.td,{children:"Integer"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"320dp"}),", if width is provided as ",(0,r.jsx)(n.code,{children:"wrap_content"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["android",":layout","_height"]}),(0,r.jsx)(n.td,{children:"Set the height"}),(0,r.jsx)(n.td,{children:"Integer"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"240dp"}),", if height is provided as ",(0,r.jsx)(n.code,{children:"wrap_content"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"sonicBackground"}),(0,r.jsxs)(n.td,{children:["Set the sonic background color. It can set background color as ",(0,r.jsx)(n.code,{children:"black"})," or ",(0,r.jsx)(n.code,{children:"white"})]}),(0,r.jsx)(n.td,{children:"Enum"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"black"})})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["It is recommended to add ",(0,r.jsx)(n.code,{children:"SonicView"})," on a full screen without padding. Padding is used to add space between two views. When you add padding to the ",(0,r.jsx)(n.code,{children:"SonicView"}),", the background of the parent view gets displayed in the padded part which can lead to a bad user experience."]})}),"\n",(0,r.jsxs)(n.p,{children:["You can add ",(0,r.jsx)(n.code,{children:"SonicView"})," either in XML or programmatically as follows:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Add ",(0,r.jsx)(n.code,{children:"SonicView"})," in XML"]})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    xmlns:app="http://schemas.android.com/apk/res-auto">\n    \x3c!-- SonicView in a full screen --\x3e\n    <com.mastercard.sonic.widget.SonicView\n        android:id="@+id/sonic_view"\n        android:layout_width="0dp"\n        android:layout_height="0dp"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n        \x3c!-- app:sonicBackground="white" will enable white background when animation will be played--\x3e\n        \x3c!-- app:sonicBackground="black" will enable black background when animation will be played--\x3e\n</androidx.constraintlayout.widget.ConstraintLayout>\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Create an instance of ",(0,r.jsx)(n.code,{children:"SonicView"})," in Fragment/Activity."]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"Kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"// import SonicView\nimport com.mastercard.sonic.widget.SonicView\n\n// Create SonicView instance\nprivate lateinit var sonicView: SonicView\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n            return inflater.inflate(R.layout.fragment_sonic, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n           super.onViewCreated(view, savedInstanceState)\n           sonicView = view.findViewById(R.id.sonic_view)\n           sonicView.background = SonicBackground.BLACK\n    }\n\n"})})}),(0,r.jsx)(s.A,{value:"Java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// import SonicView\nimport com.mastercard.sonic.widget.SonicView;\n// Create SonicView instance\nprivate SonicView sonicView;\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         return inflater.inflate(R.layout.fragment_sonic, container, false);\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        sonicView = view.findViewById(R.id.sonic_view);\n        sonicView.background = SonicBackground.BLACK;\n    }\n\n\n"})})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Add ",(0,r.jsx)(n.code,{children:"SonicView"})," Programmatically"]})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Create a blank layout file in the project and add the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\nandroid:layout_width="match_parent"\nandroid:layout_height="match_parent"\nandroid:id="@+id/main_content">\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"SonicView"})," as a child to ",(0,r.jsx)(n.code,{children:"ConstraintLayout"}),"."]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"Kotlin",label:"Kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"//import statement\nimport android.os.Bundle\nimport android.view.View\nimport androidx.constraintlayout.widget.ConstraintLayout\nimport com.mastercard.sonic.widget.SonicView\n\n    //declare sonic view in a fragment\n    private lateinit var sonicView: SonicView\n\n    //declare onCreateView with a newly created layout file\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n                return inflater.inflate(R.layout.fragment_sonic, container, false)\n        }\n\n    //create sonicView instance and add to parent view in onViewCreated method\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        var constraintLayout : ConstraintLayout = view.findViewById(R.id.main_content)\n        sonicView = SonicView(requireContext())\n        constraintLayout.addView(sonicView)\n        sonicView.layoutParams = ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT)\n    }\n\n"})})}),(0,r.jsx)(s.A,{value:"Java",label:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"//import statement\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.constraintlayout.widget.ConstraintLayout;\nimport com.mastercard.sonic.widget.SonicView;\n\n    //declare sonicView in a fragment\n    private SonicView sonicView;\n\n    //declare onCreateView with a newly created layout file\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         return inflater.inflate(R.layout.fragment_sonic, container, false);\n    }\n\n    //create sonicView and add it to parent view in onViewCreated\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        ConstraintLayout constraintLayout = view.findViewById(R.id.main_content);\n        sonicView = new SonicView(getContext());\n        sonicView.setLayoutParams(new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_PARENT, ConstraintLayout.LayoutParams.MATCH_PARENT));\n        constraintLayout.addView(sonicView);\n    }\n\n"})})}),(0,r.jsx)(s.A,{value:"ComposeUI",label:"ComposeUI",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"@Composable\nfun SonicViewComposable(onViewCreated: (SonicView) -> Unit) {\n    val context = LocalContext.current\n    val sonicView = remember { SonicView(context) }\n    AndroidView(factory = { sonicView.also { it.background = SonicBackground.BLACK } },\n        modifier = Modifier.fillMaxWidth().fillMaxHeight()) { view ->\n        onViewCreated(view)\n    }\n}\n\n"})})})]}),"\n",(0,r.jsxs)(n.h4,{id:"sonic-merchant-",children:["Sonic Merchant ",(0,r.jsx)("a",{href:"#sonic-merchant",id:"sonic-merchant"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"SonicMerchant"})," needs to be initialized and required to be pass it in ",(0,r.jsx)(n.code,{children:"prepare()"})," method."]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(s.A,{value:"kotlin",label:"kotlin",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'    private lateinit var sonicMerchant: SonicMerchant\n\n    sonicMerchant = SonicMerchant.Builder()\n                .merchantName("Uber")\n                .city("New York")\n                .merchantCategoryCodes(arrayOf("MCC 5122"))\n                .countryCode("USA")\n                .merchantId("UberId")\n                .build()\n\n'})})}),(0,r.jsx)(s.A,{value:"Java",label:"java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'    private SonicMerchant sonicMerchant;\n\n    sonicMerchant = new SonicMerchant.Builder()\n            .merchantName("Uber")\n            .city("New York")\n            .merchantCategoryCodes(new String[]{"MCC 5122"})\n            .countryCode("USA")\n            .merchantId("UberId")\n            .build();\n\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Below properties needs to be provided by merchant to configure ",(0,r.jsx)(n.code,{children:"SonicMerchant"}),"."]}),"\n",(0,r.jsxs)("table",{"data-full-width":"true",children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{width:"200",children:"Property"}),(0,r.jsx)("th",{children:"Description"}),(0,r.jsx)("th",{width:"157",children:"Type"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Reference"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"merchantName"})}),(0,r.jsxs)("td",{children:["Name that the business is known by. It will be the name that is used on all official communications. This information can be obtained by contacting your payment processor, acquiring bank\u2019s customer support and merchant services department or Mastercard Representative.",(0,r.jsx)("br",{}),"Note: If you are a service provider that engages in 1-to-many integrations, you can include your business name"]}),(0,r.jsx)("td",{children:"String"}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"merchantId"})}),(0,r.jsxs)("td",{children:["Merchant ID (Merchant Identification Number) is a unique identifier(15-digit code) assigned to each merchant at a time of onboarding process by their payment processor or acquiring bank for Mastercard Transactions.",(0,r.jsx)("br",{}),"This information can be obtained by contacting payment processor or acquiring bank\u2019s customer support or merchant services department."]}),(0,r.jsx)("td",{children:"String"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"countryCode"})}),(0,r.jsx)("td",{children:"3 digit ISO country code of the merchant accepting the Mastercard payments. The country is identified based on the country where the POS device is installed and accepting payments, or the merchant\u2019s country associated with its app."}),(0,r.jsx)("td",{children:"String"}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsxs)("td",{children:["\u2018USA\u2019",(0,r.jsx)("br",{}),(0,r.jsx)("a",{href:"https://developer.mastercard.com/mastercard-sonic-branding/documentation/android/code-and-formats/#country-codes",children:"Country Codes"})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"city"})}),(0,r.jsx)("td",{children:"City of the merchant is identified based on the location where the POS device is installed and accepting Mastercard payments, or the merchant\u2019s city associated with its app."}),(0,r.jsx)("td",{children:"String"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"merchantCategoryCodes"})}),(0,r.jsxs)("td",{children:["Merchant Category Code (MCC) is a four-digit code used to categorize businesses based on the type of products or services. This information can be obtained by contacting your payment processor, acquiring bank\u2019s customer support and merchant services department or Mastercard Representative.",(0,r.jsx)("br",{}),"Note: If you are a service provider that engages in 1-to-many integrations, please insert [\u2018MCC 0000\u2019]"]}),(0,r.jsx)("td",{children:"String[]"}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsxs)("td",{children:["[\u2018MCC 5122\u2019]",(0,r.jsx)("br",{}),(0,r.jsx)("a",{href:"https://www.mastercard.us/content/dam/mccom/en-us/documents/rules/quick-reference-booklet-merchant-edition.pdf",children:"Codesopens in a new tab"})]})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);